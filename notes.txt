CLI for now? Frontend maybe later.

What format is SICK in? Can you get a json? Tabletop Simulator? You will need to use that format.

1st step is about modeling the data shape?

Consideration for superlatives and a "big" change in board state (need to define big and knowledge of board state)

The art of describing Ravages could be its own thing. Most changes to game state happen then. (Dahan fighting back too.)

Piece of data needed for a turn:
I. Card/Spirit Board
II. Presence
III. Board pieces (Letter and numbers) (Land types? Could talk about growth options)
IV. Fear
V. Blight
VI. Invader Deck
VII. Other Tokens (Beast/Wilds/Disease/Etc.)


Assume Json file for now, worry about details later

Parse vs. Validate
Validation is asking a question of something you already have, and rejecting if its not in the right shape
Parsing is the act of insuring creation of correct data shapes

Starting out: Get a card, put out a saga description.
Anatomy of a Spirit Card:
Name
Speed
Range
Target
Energy Cost
Elements Granted
Card type (Minor/Major/Innate)
Effect
    (Parsers?)
(Thresholds/Choices)
(Unique to Spirit vs. general pool)

* Given a json files that contains cards, can select a card and have it produce a saga output

* Output includes the Name
* Output includes the Speed
* Output includes the Range
* Output includes the Target
* Output includes the Energy Cost
* Output includes the Elements Granted
* Output includes the Effect

The anatomy of a power use into saga, bare bones

Spirit, Invader, Power Being Used, Land, Results?

Spirit{ name: name}
Invader{ name: name}
Power{ done already}
Land{ type: type}

I will want string concatenation and multiple scripts

So the data will go into a power concatenator that refers to multiple scripts, probably at random, and then back to the concatenator and then back out.

The data needs to be turned into saga. Every power will have to a saga translator? Or a generic saga translator.

A simple script could be

“#{spirit} does #{effect}, against #{invaders} at #{land}”

Eventually I will need a “significance” metric.

What makes a good saga? What makes a good summary?

Playing around with unit size. Will the saga have smaller components of pargraphs/sentences?

Testing randomness:
    Don't use the rand method for cryptographic functions. It gets seeds and if seeds are re-used they get the same thing back.

    pre-seed is an option, look to the "srand" method

Use inheritence when the children have the exact public methods repeated. Exact being key word here, reconsider if there are a couple public methods not shared.

Look up the difference between classes and modules again. The finer points, specifically. Extends says I want these to be class methods, Includes is for instance methods. Remember, you can only inherit from one thing at a time.

Using Unexpected Tigers as an example with Grinning Trickster, I'd imagine something like this:

With its presence in the western wetlands [land], Grinning Trickster Stirs Up Trouble [spirit name] effortlessly [0 energy] called forth Unexpected Tigers [card name] upon the neighboring [1 range] mountains, gathering the power of the moon, of fire, and of animals [elements] and invoking anxiety [1 fear] within the explorers [land contents] there. From the neighboring jungle, the beasts roamed in, driving a few explorers out back to the nearby wetlands. 

when to case and when to if: 
Use Case if the thing you are pushing on is the same shape/type

Use If if the condition can vary arbitrarily 

Move if then statements out of work level and into creation
Read up on Polymorphism 